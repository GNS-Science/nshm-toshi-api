# serverless.yml

service: nshm-tosh-api

plugins:
  - serverless-python-requirements
  - serverless-wsgi
  - serverless-s3-local
package:
#  include:
#    - src/graphql_api/graphql_api/**
  exclude:
    - .git/**
    - .pytest_cache/**
    - .tox/**
    - bin/**
    - demo/**
    - lib/**
    - node_modules/**
    - prof/**

custom:
  wsgi:
    app: graphql_api.api.app
    packRequirements: false
  pythonRequirements:
    dockerizePip: non-linux
  s3:
    host: localhost
    directory: /tmp


# DRY constants: define all compound/generated names in one place
# Override args are: .. defaults:
# --app_acroym          signed-uploader
# --s3_bucket           self:custom.app_acronym
# --s3_key_base         self:custom.stage
# --region              us-east-1
# --stage               test
# --deletion_policy     delete

  app_acronym: ${opt:acronym, self:service}
  default_stage: local
  stage: ${opt:stage, self:custom.default_stage}
  stack_name: ${self:custom.app_acronym}-${self:custom.stage}
  region: ${opt:region, self:provider.region}
  deletion_policy: Delete
  # Default to using app_acronym as bucket name
  s3_bucket: ${opt:s3_bucket, self:custom.app_acronym}-${self:custom.stage}
  # default to using ${stage} as key base path, keeps stages from namespace collisions
  s3_bucket_arn: arn:aws:s3:::${self:custom.s3_bucket}
  s3_role_resource: ${self:custom.s3_bucket_arn}
  # Put this here rather than in code (presigned URL TTL)
  url_default_ttl: 60

  #elastic search
  esDomainName: toshi-search-${self:custom.stage}
  #esRoleName: LambdaServiceRole #review where this crops up!
  esIndex: toshi_index
  es_role_resource: arn:aws:es:::domain/${self:custom.esDomainName}

provider:
  name: aws
  runtime: python3.8
  # stage: ${opt:stage, 'dev'}
  region: ap-southeast-2
  environment:
    REGION: ${self:custom.region}
    S3_BUCKET_NAME: ${self:custom.s3_bucket}
    #S3_KEY_BASE: ${self:custom.s3_key_base}
    URL_DEFAULT_TTL: ${self:custom.url_default_ttl}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:*
      Resource:
        - ${self:custom.s3_role_resource}
        - ${self:custom.s3_role_resource}/*
    - Effect: Allow
      Action:
        - es:*
      Resource:
        - ${self:custom.es_role_resource}
        - ${self:custom.es_role_resource}/*

  apiKeys:
    - name: TempApiKey-${self:custom.stage}
      description: Api key until we have an auth function # Optional

functions:
  app:
    description: The graphql API of ${self:service}
    handler: wsgi_handler.handler
    memorySize: 512 # optional, in MB, default is 1024
    timeout: 30 # optional, in seconds, default is 6
    events:
      # - http: 'ANY /'
      #   private: true
      # - http: 'ANY {proxy+}'
      #   private: true
      - http:
          path: graphql
          method: OPTIONS
      - http:
          path: graphql
          method: POST
          private: true
      - http:
          path: graphql
          method: GET
          private: true
    environment:
      ES_ENDPOINT: https://search-toshi-search-dev-bjuebpcraamxtlwuhktnyuu2ve.ap-southeast-2.es.amazonaws.com
      ES_INDEX: ${self:custom.esIndex}
      ES_REGION: ${self:custom.region}
      ES_DOMAIN_NAME: ${self:custom.esDomainName}

resources:
  Resources:
    NewResource:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3_bucket}

    # following is from
    #   https://www.serverless.com/blog/build-geosearch-graphql-api-aws-appsync-elasticsearch
    ElasticSearchInstance:
      Type: AWS::Elasticsearch::Domain
      Properties:
        ElasticsearchVersion: 6.2
        DomainName: "${self:custom.esDomainName}"
        EBSOptions:
          EBSEnabled: true
          VolumeType: gp2
          VolumeSize: 10
        ElasticsearchClusterConfig:
          InstanceType: t2.small.elasticsearch
          InstanceCount: 1
          DedicatedMasterEnabled: false
          ZoneAwarenessEnabled: false

    # LambdaESServiceRole:
    #   Type: "AWS::IAM::Role"
    #   Properties:
    #     RoleName: "ElasticSearch-${self:custom.esRoleName}"
    #     AssumeRolePolicyDocument:
    #       Version: "2012-10-17"
    #       Statement:
    #         -
    #           Effect: "Allow"
    #           Principal:
    #             Service:
    #               - "lambda.amazonaws.com"
    #           Action:
    #             - "sts:AssumeRole"
    #     Policies:
    #       -
    #         PolicyName: "AppSyncESServiceRolePolicy"
    #         PolicyDocument:
    #           Version: "2012-10-17"
    #           Statement:
    #             -
    #               Effect: "Allow"
    #               Action:
    #                 - "es:*"
    #               Resource:
    #                 - 'Fn::Join':
    #                     - ''
    #                     -
    #                       - 'arn:aws:es:'
    #                       - Ref: 'AWS::Region'
    #                       - ':'
    #                       - Ref: 'AWS::AccountId'
    #                       - ':domain/'
    #                       - "${self:custom.esDomainName}"
    #                       - '/*'
