swagger: "2.0"
info:
  description: "This is a sample server 
    "
  version: "1.0.0"
  title: "Stolen / hacked API from the Swagger Petstore"
  #termsOfService: "http://swagger.io/terms/"
  #contact:
  #  email: "apiteam@swagger.io"
  #license:
  #  name: "Apache 2.0"
  #  url: "http://www.apache.org/licenses/LICENSE-2.0.html"
#host: "toshstore.swagger.io"
basePath: "/v2"
tags:
- name: "tosh"
  description: "Everything about your Toshs"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  /tosh:
    post:
      tags:
      - "tosh"
      summary: "Add a new tosh to the store"
      description: ""
      operationId: "addTosh"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Tosh object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Tosh"
      responses:
        "405":
          description: "Invalid input"
      security:
      - toshstore_auth:
        - "write:toshs"
        - "read:toshs"
    put:
      tags:
      - "tosh"
      summary: "Update an existing tosh"
      description: ""
      operationId: "updateTosh"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Tosh object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Tosh"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Tosh not found"
        "405":
          description: "Validation exception"
      security:
      - toshstore_auth:
        - "write:toshs"
        - "read:toshs"
  /tosh/findByStatus:
    get:
      tags:
      - "tosh"
      summary: "Finds Toshs by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findToshsByStatus"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "available"
          - "pending"
          - "sold"
          default: "available"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Tosh"
        "400":
          description: "Invalid status value"
      security:
      - toshstore_auth:
        - "write:toshs"
        - "read:toshs"

  /tosh/{toshId}:
    get:
      tags:
      - "tosh"
      summary: "Find tosh by ID"
      description: "Returns a single tosh"
      operationId: "getToshById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "toshId"
        in: "path"
        description: "ID of tosh to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Tosh"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Tosh not found"
      security:
      - api_key: []
    post:
      tags:
      - "tosh"
      summary: "Updates a tosh in the store with form data"
      description: ""
      operationId: "updateToshWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "toshId"
        in: "path"
        description: "ID of tosh that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Updated name of the tosh"
        required: false
        type: "string"
      - name: "status"
        in: "formData"
        description: "Updated status of the tosh"
        required: false
        type: "string"
      responses:
        "405":
          description: "Invalid input"
      security:
      - toshstore_auth:
        - "write:toshs"
        - "read:toshs"
    delete:
      tags:
      - "tosh"
      summary: "Deletes a tosh"
      description: ""
      operationId: "deleteTosh"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "toshId"
        in: "path"
        description: "Tosh id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Tosh not found"
      security:
      - toshstore_auth:
        - "write:toshs"
        - "read:toshs"
  /tosh/{toshId}/uploadImage:
    post:
      tags:
      - "tosh"
      summary: "uploads an image"
      description: ""
      operationId: "uploadFile"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "toshId"
        in: "path"
        description: "ID of tosh to update"
        required: true
        type: "integer"
        format: "int64"
      - name: "additionalMetadata"
        in: "formData"
        description: "Additional data to pass to server"
        required: false
        type: "string"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: false
        type: "file"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
      security:
      - toshstore_auth:
        - "write:toshs"
        - "read:toshs"



securityDefinitions:
  toshstore_auth:
    type: "oauth2"
    authorizationUrl: "http://toshstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:toshs: "modify toshs in your account"
      read:toshs: "read your toshs"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Tosh:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "tosh status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"
    xml:
      name: "Tosh"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
